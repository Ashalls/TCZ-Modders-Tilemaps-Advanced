<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="yOMTO.xIlq5TY@b43=dD" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="..|e{*Qy9AtqEL$r+t0Q" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace tilesAdvanced {" line1="    /**" line2="     * Returns a list of tiles in a plus sign within a tile in a given range" line3="     */" line4="    //% blockId=getAdjacentTiles" line5="    //% block=&quot;get tiles near to $tile within $distance&quot;" line6="    //% group=&quot;Local Tiles&quot;" line7="    //% weight=20" line8="    export function getAdjacentTiles(tile: tiles.Location, distance: number): tiles.Location[] {" line9="        let i: number;" line10="        let col = tile.col;" line11="        let row = tile.row;" line12="        let adjacent_tiles = [tile];" line13="" line14="        for (i = 0; i &lt; distance; i++) {" line15="            adjacent_tiles.push(tiles.getTileLocation(col - i, row))" line16="        }" line17="        for (i = 0; i &lt; distance; i++) {" line18="            adjacent_tiles.push(tiles.getTileLocation(col + i, row))" line19="        }" line20="        for (i = 0; i &lt; distance; i++) {" line21="            adjacent_tiles.push(tiles.getTileLocation(col, row - i))" line22="        }" line23="        for (i = 0; i &lt; distance; i++) {" line24="            adjacent_tiles.push(tiles.getTileLocation(col, row + i))" line25="        }" line26="        return adjacent_tiles" line27="    }" line28="" line29="    /**" line30="     * Returns true if the given tiles are the same tile" line31="     */" line32="    //% blockId=tileIsTile" line33="    //% block=&quot;$tile is $otherTile&quot;" line34="    //% group=&quot;Tile Comparisons&quot;" line35="    //% weight=20" line36="    export function tileIsTile(tile: tiles.Location, otherTile: tiles.Location): boolean{" line37="        if (tile.col == otherTile.col &amp;&amp; tile.row == otherTile.row){" line38="            return true" line39="        }" line40="        return false" line41="    }" line42="" line43="    /**" line44="     * Returns true if the given tile is in the list of tiles provided" line45="     */" line46="    //% blockId=tileIsInList" line47="    //% block=&quot;$tile is in $tileList&quot;" line48="    //% group=&quot;Tile Comparisons&quot;" line49="    //% weight=20" line50="    export function tileIsInList(tile: tiles.Location, tileList: tiles.Location[]): boolean{" line51="        for (let tileInList of tileList){" line52="            if (tileIsTile(tile, tileInList)){" line53="                return true" line54="            }" line55="        }" line56="        return false" line57="    }" line58="}" numlines="59"></mutation></block></statement></block></xml>